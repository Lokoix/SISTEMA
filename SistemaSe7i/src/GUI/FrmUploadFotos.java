package GUI;


import Utilitario.Conexao;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Gabriel
 */
public class FrmUploadFotos extends javax.swing.JFrame {

    ArrayList<BufferedImage> imagens;
    ArrayList<String> nomeDosArquivos;

    /**
     * Creates new form Upload
     */
    public FrmUploadFotos() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        carregaComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblImagem = new javax.swing.JLabel();
        cbleilao = new javax.swing.JComboBox<>();
        txtIdCid = new javax.swing.JTextField();
        lbltraseira = new javax.swing.JLabel();
        txtlote = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblfrente = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblchassi = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblmotor = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lblexistentes = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lblatualizados = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lblexistentes3 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblextra1 = new javax.swing.JLabel();
        lblextra2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusable(false);

        cbleilao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbleilao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbleilaoItemStateChanged(evt);
            }
        });

        txtIdCid.setEditable(false);
        txtIdCid.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Traseira");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Frente");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Chassi");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Motor");

        jLabel6.setText("Lotes Existentes");

        lblexistentes.setBackground(new java.awt.Color(255, 204, 204));
        lblexistentes.setColumns(10);
        lblexistentes.setRows(5);
        jScrollPane1.setViewportView(lblexistentes);

        jLabel7.setText("Lotes Atualizados");

        lblatualizados.setBackground(new java.awt.Color(51, 255, 255));
        lblatualizados.setColumns(10);
        lblatualizados.setRows(5);
        jScrollPane2.setViewportView(lblatualizados);

        jLabel8.setText("Lotes Novos");

        lblexistentes3.setBackground(new java.awt.Color(153, 255, 153));
        lblexistentes3.setColumns(10);
        lblexistentes3.setRows(5);
        jScrollPane3.setViewportView(lblexistentes3);

        jLabel5.setText("Buscar Lote ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Extras");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/if_Open_1493293.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/if_Close_1493281.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(txtIdCid, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbleilao, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(lblImagem))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lbltraseira, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(lblchassi, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(txtlote, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(lblfrente, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(lblmotor, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 95, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblextra1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblextra2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbleilao)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIdCid))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(lblImagem))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblextra1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblextra2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtlote, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lbltraseira, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                    .addComponent(lblfrente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(6, 6, 6)
                                        .addComponent(lblchassi, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(6, 6, 6)
                                        .addComponent(lblmotor, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void CaminhoFotos()
    {
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(true);
        int res = fc.showOpenDialog(null);
        File[] arquivos;
        if (res == JFileChooser.APPROVE_OPTION) {

            arquivos = fc.getSelectedFiles();
            nomeDosArquivos = new ArrayList<>();
            imagens = new ArrayList<>();

            for (File f : arquivos) {
                nomeDosArquivos.add(f.getName());
                try {
                    imagens.add(Utilitarios.ManipularImagem.setImagemDimensao(f.getAbsolutePath(), 800, 600));
                } catch (Exception ex) {
                  
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Você não selecionou nenhum arquivo.");
        }
    }

    public void InserirFotos()
    {
        try{
        int contador = 0;
            for (BufferedImage i : imagens) {

                String leilao = cbleilao.getSelectedItem().toString();
                java.io.File diretorio1 = new java.io.File("C:/Leilões"); // não precisa alterar o local
                boolean statusDir1 = diretorio1.mkdir();
                java.io.File diretorio2 = new java.io.File(diretorio1+"/"+leilao+"/");
                boolean statusDir2 = diretorio2.mkdir();
                java.io.File diretorio3 = new java.io.File(diretorio2+"/Fotos/");
                boolean statusDir3 = diretorio3.mkdir();
             

                String caminhofinal = diretorio3 + "/" + nomeDosArquivos.get(contador);
                String diretoriofinal = diretorio3 + "/";

                String Lote, Tipo;
                

                if (caminhofinal.contains("T_")) 
                {
                    Lote = caminhofinal.substring(caminhofinal.lastIndexOf("/") + 1, caminhofinal.lastIndexOf("T_"));
                    Tipo = caminhofinal.substring(caminhofinal.lastIndexOf("T_"), caminhofinal.lastIndexOf("T_") + 2);
                    
                   
                    String sql1 = "select * from uploadfotos where uploadfotos_caminho=?";
                    PreparedStatement st = Conexao.getConnection().prepareStatement(sql1);
                    st.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                    ResultSet rs = st.executeQuery();

                    if (!rs.next()) {
                        File outputfile = new File(diretoriofinal + Lote + Tipo + ".jpg");
                        ImageIO.write(i, "jpg", outputfile);

                        String sql = "insert into uploadfotos (uploadfotos_caminho, uploadfotos_lote, uploadfotos_tipo, uploadfotos_idleilao) values (?, ?, ?, ?)";
                        PreparedStatement pst = Conexao.getConnection().prepareStatement(sql);
                        pst.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                        pst.setString(2, Lote);
                        pst.setString(3, Tipo);
                        pst.setString(4, txtIdCid.getText());                     
                        pst.execute();
                        Conexao.getConnection().commit();
                        String existente = Lote + Tipo;
                        lblatualizados.setText(lblatualizados.getText() + existente + "\n");
                    } else {
                        String existente = Lote + Tipo;
                        lblexistentes.setText(lblexistentes.getText() + existente + "\n");
                    }
                }
                
                else if (caminhofinal.contains("MP_")) 
                {
                    Lote = caminhofinal.substring(caminhofinal.lastIndexOf("/") + 1, caminhofinal.lastIndexOf("MP_"));
                    Tipo = caminhofinal.substring(caminhofinal.lastIndexOf("MP"), caminhofinal.lastIndexOf("MP_") + 3);
                   
                   
                    String sql1 = "select * from uploadfotos where uploadfotos_caminho=?";
                    PreparedStatement st = Conexao.getConnection().prepareStatement(sql1);
                    st.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                    ResultSet rs = st.executeQuery();

                    if (!rs.next()) {
                        File outputfile = new File(diretoriofinal + Lote + Tipo + ".jpg");
                        ImageIO.write(i, "jpg", outputfile);

                        String sql = "insert into uploadfotos (uploadfotos_caminho, uploadfotos_lote, uploadfotos_tipo, uploadfotos_idleilao) values (?, ?, ?, ?)";
                        PreparedStatement pst = Conexao.getConnection().prepareStatement(sql);
                        pst.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                        pst.setString(2, Lote);
                        pst.setString(3, Tipo);
                        pst.setString(4, txtIdCid.getText());                     
                        pst.execute();
                        Conexao.getConnection().commit();
                        String existente = Lote + Tipo;
                        lblatualizados.setText(lblatualizados.getText() + existente + "\n");
                    } else {
                        String existente = Lote + Tipo;
                        lblexistentes.setText(lblexistentes.getText() + existente + "\n");
                    }
                } else if (caminhofinal.contains("MF_")) {
                    Lote = caminhofinal.substring(caminhofinal.lastIndexOf("/") + 1, caminhofinal.lastIndexOf("MF_"));
                    Tipo = caminhofinal.substring(caminhofinal.lastIndexOf("MF"), caminhofinal.lastIndexOf("MF_") + 3);
                   
                   
                    String sql1 = "select * from uploadfotos where uploadfotos_caminho=?";
                    PreparedStatement st = Conexao.getConnection().prepareStatement(sql1);
                    st.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                    ResultSet rs = st.executeQuery();

                    if (!rs.next()) {
                        File outputfile = new File(diretoriofinal + Lote + Tipo + ".jpg");
                        ImageIO.write(i, "jpg", outputfile);

                        String sql = "insert into uploadfotos (uploadfotos_caminho, uploadfotos_lote, uploadfotos_tipo, uploadfotos_idleilao) values (?, ?, ?, ?)";
                        PreparedStatement pst = Conexao.getConnection().prepareStatement(sql);
                        pst.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                        pst.setString(2, Lote);
                        pst.setString(3, Tipo);
                        pst.setString(4, txtIdCid.getText());                     
                        pst.execute();
                        Conexao.getConnection().commit();
                        String existente = Lote + Tipo;
                        lblatualizados.setText(lblatualizados.getText() + existente + "\n");
                    } else {
                        String existente = Lote + Tipo;
                        lblexistentes.setText(lblexistentes.getText() + existente + "\n");
                    }
                } else if (caminhofinal.contains("CH_")) {
                    Lote = caminhofinal.substring(caminhofinal.lastIndexOf("/") + 1, caminhofinal.lastIndexOf("CH_"));
                    Tipo = caminhofinal.substring(caminhofinal.lastIndexOf("CH"), caminhofinal.lastIndexOf("CH_") + 3);
                    
                   
                    String sql1 = "select * from uploadfotos where uploadfotos_caminho=?";
                    PreparedStatement st = Conexao.getConnection().prepareStatement(sql1);
                    st.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                    ResultSet rs = st.executeQuery();

                    if (!rs.next()) {
                        File outputfile = new File(diretoriofinal + Lote + Tipo + ".jpg");
                        ImageIO.write(i, "jpg", outputfile);

                        String sql = "insert into uploadfotos (uploadfotos_caminho, uploadfotos_lote, uploadfotos_tipo, uploadfotos_idleilao) values (?, ?, ?, ?)";
                        PreparedStatement pst = Conexao.getConnection().prepareStatement(sql);
                        pst.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                        pst.setString(2, Lote);
                        pst.setString(3, Tipo);
                        pst.setString(4, txtIdCid.getText());                     
                        pst.execute();
                        Conexao.getConnection().commit();
                        String existente = Lote + Tipo;
                        lblatualizados.setText(lblatualizados.getText() + existente + "\n");
                    } else {
                        String existente = Lote + Tipo;
                        lblexistentes.setText(lblexistentes.getText() + existente + "\n");
                    }
                } else if (caminhofinal.contains("E")) {
                    
                   
                    Lote = caminhofinal.substring(caminhofinal.lastIndexOf("/") + 1, caminhofinal.lastIndexOf(".jpg")-2);
                   
                    Tipo = caminhofinal.substring(caminhofinal.indexOf(".jpg")-2, caminhofinal.lastIndexOf(".jpg"));
                    
                   
                    String sql1 = "select * from uploadfotos where uploadfotos_caminho=?";
                    PreparedStatement st = Conexao.getConnection().prepareStatement(sql1);
                    st.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                    ResultSet rs = st.executeQuery();

                    if (!rs.next()) {
                        File outputfile = new File(diretoriofinal + Lote + Tipo + ".jpg");
                        ImageIO.write(i, "jpg", outputfile);

                        String sql = "insert into uploadfotos (uploadfotos_caminho, uploadfotos_lote, uploadfotos_tipo, uploadfotos_idleilao) values (?, ?, ?, ?)";
                        PreparedStatement pst = Conexao.getConnection().prepareStatement(sql);
                        pst.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                        pst.setString(2, Lote);
                        pst.setString(3, Tipo);
                        pst.setString(4, txtIdCid.getText());                     
                        pst.execute();
                        Conexao.getConnection().commit();
                        String existente = Lote + Tipo;
                        lblatualizados.setText(lblatualizados.getText() + existente + "\n");
                    } else {
                        String existente = Lote + Tipo;
                        lblexistentes.setText(lblexistentes.getText() + existente + "\n");
                    }
                }
                else if (caminhofinal.contains("F.jpg")) {
                    
                    Lote = caminhofinal.substring(caminhofinal.lastIndexOf("/") + 1, caminhofinal.lastIndexOf(".jpg")-1);
                    Tipo = caminhofinal.substring(caminhofinal.lastIndexOf("F"), caminhofinal.lastIndexOf("F") + 1);
                    
                   
                    String sql1 = "select * from uploadfotos where uploadfotos_caminho=?";
                    PreparedStatement st = Conexao.getConnection().prepareStatement(sql1);
                    st.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                    ResultSet rs = st.executeQuery();

                    if (!rs.next()) {
                        File outputfile = new File(diretoriofinal + Lote + Tipo + ".jpg");
                        ImageIO.write(i, "jpg", outputfile);

                        String sql = "insert into uploadfotos (uploadfotos_caminho, uploadfotos_lote, uploadfotos_tipo, uploadfotos_idleilao) values (?, ?, ?, ?)";
                        PreparedStatement pst = Conexao.getConnection().prepareStatement(sql);
                        pst.setString(1, diretoriofinal + Lote + Tipo + ".jpg");
                        pst.setString(2, Lote);
                        pst.setString(3, Tipo);
                        pst.setString(4, txtIdCid.getText());                     
                        pst.execute();
                        Conexao.getConnection().commit();
                        String existente = Lote + Tipo;
                        lblatualizados.setText(lblatualizados.getText() + existente + "\n");
                    } else {
                        String existente = Lote + Tipo;
                        lblexistentes.setText(lblexistentes.getText() + existente + "\n");
                    }
                }
         
                contador++;
            }

            nomeDosArquivos.clear();
            imagens.clear();
            JOptionPane.showMessageDialog(rootPane, "Imagens enviadas com sucesso");

        } catch (IOException ex) {
            Logger.getLogger(FrmUploadFotos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FrmUploadFotos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void verificarFotosTraseira() {
        /*
        int contador = 0; 
        for (BufferedImage i : imagens)
        {
            String Tipo, Placa;
            File Arquivo = new File(nomeDosArquivos.get(contador));
            String Lote = new File(nomeDosArquivos.get(contador).substring(0, 4)).toString(); 
            if(Lote.substring(4).equals("T"))
            {
                System.out.println(Lote);
                Tipo = "Traseira"; 
                Placa = Lote.substring(6,14); 
                System.out.println(Lote); 
                System.out.println(Tipo);
                System.out.println(Placa);
            }else
            {
                int k=0; 
                while(!"T".equals(Lote.substring(k)))
                {
                    Lote = Lote.substring(k); 
                    k++; 
                }
                if(Lote.substring(k).equals("T")){
                    Tipo = "Traseira"; 
                    Placa = Lote.substring(6,12); 
                    System.out.println(Lote); 
                    System.out.println(Tipo);
                    System.out.println(Placa);
                }
            } 
        }  
         */
    }

    private void cbleilaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbleilaoItemStateChanged
        BuscarIdCidade();
        setarLabel(); 
        limpar();
    }//GEN-LAST:event_cbleilaoItemStateChanged

    public void setarLabel() {
        lbltraseira.setIcon(null);
        lblfrente.setIcon(null);
        lblchassi.setIcon(null);
        lblmotor.setIcon(null);
        lblextra1.setIcon(null); 
        lblextra2.setIcon(null);        
    }
    public void limpar()
    {
        txtlote.setText(""); 
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(txtlote.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Informe o lote!", "Buscar Lote",1); 
        }else
        {
            setarLabel();
            carregarfototraseira();
            carregarfotofrente();
            carregarfotochassi();
            carregarfotomotor();
            carregarfotoextra1(); 
            carregarfotoextra2(); 
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CaminhoFotos();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int confirma = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja continuar? Este processo poderá levar alguns minutos...","Upload",JOptionPane.YES_NO_OPTION);        
        if(confirma == JOptionPane.YES_OPTION)
        {
            InserirFotos();
        }  
    }//GEN-LAST:event_jButton3ActionPerformed
    
    
    public void carregarfototraseira() {
        String sql = "Select * from uploadfotos where uploadfotos_lote=" + txtlote.getText() + " and uploadfotos_idleilao=" + txtIdCid.getText() + " and uploadfotos_tipo='T_'";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            String caminhofinal = null;

            while (rs.next()) {
                caminhofinal = rs.getString(2);
            }

            ImageIcon icontraseira = new ImageIcon(caminhofinal);
            lbltraseira.setIcon(new ImageIcon(icontraseira.getImage().getScaledInstance(lbltraseira.getWidth(), lbltraseira.getHeight(), Image.SCALE_DEFAULT)));

            Conexao.getConnection().commit();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
           
            
        }
    }

    public void carregarfotofrente() {
        String sql = "Select * from uploadfotos where uploadfotos_lote=" + txtlote.getText() + " and uploadfotos_idleilao=" + txtIdCid.getText() + " and uploadfotos_tipo='F'";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            String caminhofinal = null;

            while (rs.next()) {
                caminhofinal = rs.getString(2);
            }
            ImageIcon iconfrente = new ImageIcon(caminhofinal);

            lblfrente.setIcon(new ImageIcon(iconfrente.getImage().getScaledInstance(lblfrente.getWidth(), lblfrente.getHeight(), Image.SCALE_DEFAULT)));
            Conexao.getConnection().commit();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void carregarfotochassi() {
        String sql = "Select * from uploadfotos where (uploadfotos_lote=" + txtlote.getText() + " and uploadfotos_idleilao=" + txtIdCid.getText() + ") and (uploadfotos_tipo='CH_' or uploadfotos_tipo ='CF_')";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            String caminhofinal = null;

            while (rs.next()) {
                caminhofinal = rs.getString(2);
            }
            ImageIcon iconchassi = new ImageIcon(caminhofinal);
            lblchassi.setIcon(new ImageIcon(iconchassi.getImage().getScaledInstance(lblchassi.getWidth(), lblchassi.getHeight(), Image.SCALE_DEFAULT)));

            Conexao.getConnection().commit();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void carregarfotomotor() {
        String sql = "Select * from uploadfotos where (uploadfotos_lote=" + txtlote.getText() + " and uploadfotos_idleilao=" + txtIdCid.getText() + ") and (uploadfotos_tipo='MP_' or uploadfotos_tipo = 'MF_')";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            String caminhofinal = null;

            while (rs.next()) {
                caminhofinal = rs.getString(2);
            }
            ImageIcon iconmotor = new ImageIcon(caminhofinal);
            lblmotor.setIcon(new ImageIcon(iconmotor.getImage().getScaledInstance(lblmotor.getWidth(), lblmotor.getHeight(), Image.SCALE_DEFAULT)));
            Conexao.getConnection().commit();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    public void carregarfotoextra1() {
        String sql = "Select * from uploadfotos where uploadfotos_lote=" + txtlote.getText() + " and uploadfotos_idleilao=" + txtIdCid.getText() + " and uploadfotos_tipo='EA'";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            String caminhofinal = null;

            while (rs.next()) {
                caminhofinal = rs.getString(2);
            }
            ImageIcon iconfrente = new ImageIcon(caminhofinal);

            lblextra1.setIcon(new ImageIcon(iconfrente.getImage().getScaledInstance(lblextra1.getWidth(), lblextra1.getHeight(), Image.SCALE_DEFAULT)));
            Conexao.getConnection().commit();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    public void carregarfotoextra2() {
        String sql = "Select * from uploadfotos where uploadfotos_lote=" + txtlote.getText() + " and uploadfotos_idleilao=" + txtIdCid.getText() + " and uploadfotos_tipo='EB'";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            String caminhofinal = null;

            while (rs.next()) {
                caminhofinal = rs.getString(2);
            }
            ImageIcon iconfrente = new ImageIcon(caminhofinal);

            lblextra2.setIcon(new ImageIcon(iconfrente.getImage().getScaledInstance(lblextra2.getWidth(), lblextra2.getHeight(), Image.SCALE_DEFAULT)));
            Conexao.getConnection().commit();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }


    public void BuscarIdCidade() {
        try {
            String sql = "select * from leilao where leilao_nome like '%" + cbleilao.getSelectedItem() + "%' ";
            PreparedStatement preparedStatement = Conexao.getConnection().prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();
            while (rs.next()) {
                txtIdCid.setText(rs.getString(1));
            }
        } catch (Exception e) {
        }
    }

    public void carregaComboBox() {
        try {
            Connection conn;
            conn = Conexao.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT leilao.leilao_nome FROM leilao");
            while (rs.next()) {
                cbleilao.addItem(rs.getString("leilao_nome"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Ocorreu erro ao carregar a Combo Box", "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmUploadFotos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmUploadFotos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmUploadFotos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmUploadFotos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmUploadFotos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbleilao;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblImagem;
    private javax.swing.JTextArea lblatualizados;
    private javax.swing.JLabel lblchassi;
    private javax.swing.JTextArea lblexistentes;
    private javax.swing.JTextArea lblexistentes3;
    private javax.swing.JLabel lblextra1;
    private javax.swing.JLabel lblextra2;
    private javax.swing.JLabel lblfrente;
    private javax.swing.JLabel lblmotor;
    private javax.swing.JLabel lbltraseira;
    private javax.swing.JTextField txtIdCid;
    private javax.swing.JTextField txtlote;
    // End of variables declaration//GEN-END:variables
}
